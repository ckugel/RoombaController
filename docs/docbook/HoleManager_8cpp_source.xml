<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_HoleManager_8cpp_source" xml:lang="en-US">
<title>HoleManager.cpp</title>
<indexterm><primary>/home/calebk/Documents/coding/RoombaController/src/HoleManager.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_HoleManager_8cpp_source_1l00001"/>00001 
<anchor xml:id="_HoleManager_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_HoleManager_8hpp">HoleManager.hpp</link>&quot;</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_Field_8hpp">Field.hpp</link>&quot;</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00008"/>00008 
<anchor xml:id="_HoleManager_8cpp_source_1l00009"/><link linkend="_classHoleManager_1a2a70f9e895789105b0b45df164bf6ff6">00009</link> <link linkend="_classHoleManager_1a2a70f9e895789105b0b45df164bf6ff6">HoleManager::HoleManager</link>()&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;holes&#32;=&#32;std::make_unique&lt;std::vector&lt;Hole&gt;&gt;();
<anchor xml:id="_HoleManager_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;holeMeasurements&#32;=&#32;std::make_unique&lt;std::vector&lt;Pose2D&gt;&gt;();
<anchor xml:id="_HoleManager_8cpp_source_1l00012"/>00012 }
<anchor xml:id="_HoleManager_8cpp_source_1l00013"/>00013 
<anchor xml:id="_HoleManager_8cpp_source_1l00014"/><link linkend="_classHoleManager_1a5c2e0ffae18e961f5ba3f18688ef34bf">00014</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classHoleManager_1ae4fc057aea5dbfc0596b48455beed1e7">HoleManager::addHole</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classPose2D">Pose2D</link>&amp;&#32;cornerOne,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classPose2D">Pose2D</link>&amp;&#32;cornerTwo)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;size&#32;=&#32;cornerOne.<link linkend="_classPose2D_1a9acb14a9b0252c620dfc1e79139b52d3">distanceTo</link>(cornerTwo)&#32;/&#32;sqrt(2);
<anchor xml:id="_HoleManager_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;this-&gt;holes-&gt;push_back(<link linkend="_classHole">Hole</link>(cornerOne,&#32;cornerTwo,&#32;size));
<anchor xml:id="_HoleManager_8cpp_source_1l00017"/>00017 }
<anchor xml:id="_HoleManager_8cpp_source_1l00018"/>00018 
<anchor xml:id="_HoleManager_8cpp_source_1l00019"/><link linkend="_classHoleManager_1ae4fc057aea5dbfc0596b48455beed1e7">00019</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classHoleManager_1ae4fc057aea5dbfc0596b48455beed1e7">HoleManager::addHole</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classHole">Hole</link>&amp;&#32;hole)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;this-&gt;holes-&gt;push_back(hole);
<anchor xml:id="_HoleManager_8cpp_source_1l00021"/>00021 }
<anchor xml:id="_HoleManager_8cpp_source_1l00022"/>00022 
<anchor xml:id="_HoleManager_8cpp_source_1l00023"/><link linkend="_classHoleManager_1a50df7cfd1e6e527d16b939769317ec50">00023</link> <link linkend="_classHole">Hole</link>&#32;<link linkend="_classHoleManager_1a50df7cfd1e6e527d16b939769317ec50">HoleManager::getHole</link>(uint8_t&#32;index)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&gt;&#32;holes-&gt;size())&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{NAN,&#32;NAN,&#32;NAN,&#32;NAN,&#32;NAN};
<anchor xml:id="_HoleManager_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;holes-&gt;data()[index];
<anchor xml:id="_HoleManager_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00030"/>00030 }
<anchor xml:id="_HoleManager_8cpp_source_1l00031"/>00031 
<anchor xml:id="_HoleManager_8cpp_source_1l00032"/><link linkend="_classHoleManager_1a586843e9065c89985c3b76bc8a2f9003">00032</link> std::vector&lt;Hole&gt;&#32;<link linkend="_classHoleManager_1a586843e9065c89985c3b76bc8a2f9003">HoleManager::getHoles</link>()&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;std::vector&lt;Hole&gt;&#32;toCpy;
<anchor xml:id="_HoleManager_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;holes-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toCpy.push_back(holes-&gt;data()[i]);&#32;<emphasis role="comment">//&#32;Unsafe&#32;lol</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toCpy;
<anchor xml:id="_HoleManager_8cpp_source_1l00038"/>00038 }
<anchor xml:id="_HoleManager_8cpp_source_1l00039"/>00039 
<anchor xml:id="_HoleManager_8cpp_source_1l00040"/><link linkend="_classHoleManager_1a317b24d6b0d2b5f843d3cbc4fcf39dd8">00040</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classHoleManager_1a317b24d6b0d2b5f843d3cbc4fcf39dd8">HoleManager::addPoint</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classPose2D">Pose2D</link>&amp;&#32;position)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;foundMatch&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_HoleManager_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;this-&gt;holeMeasurements-&gt;push_back(position);&#32;
<anchor xml:id="_HoleManager_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint16_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;holes-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;holes-&gt;data()[i].pointCouldBeMemberOfHole(position))&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;holes-&gt;data()[i].addPoint(position);
<anchor xml:id="_HoleManager_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundMatch&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_HoleManager_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_HoleManager_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!foundMatch)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;holes-&gt;push_back(<link linkend="_classHole">Hole</link>(position,&#32;<link linkend="_Hole_8hpp_1a657e122f8983d0a993ee0266696f1984">HOLE_SIZE</link>));
<anchor xml:id="_HoleManager_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00053"/>00053 }
<anchor xml:id="_HoleManager_8cpp_source_1l00054"/>00054 
<anchor xml:id="_HoleManager_8cpp_source_1l00055"/>00055 <emphasis role="comment">//&#32;deiscretization&#32;step</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00056"/><link linkend="_classHoleManager_1a3b0b1c780a1ed91646e0bcbf1dd23e70">00056</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classHoleManager_1a3b0b1c780a1ed91646e0bcbf1dd23e70">HoleManager::nodeCollides</link>(<link linkend="_classPose2D">Pose2D</link>&#32;position)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00057"/>00057 
<anchor xml:id="_HoleManager_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;shoot&#32;out&#32;a&#32;small&#32;line&#32;from&#32;the&#32;position&#32;in&#32;the&#32;dircection&#32;of&#32;the&#32;heading</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00060"/>00060 <emphasis role="comment">&#32;&#32;&#32;&#32;for&#32;(uint16_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;holeMeasurements-&gt;size();&#32;i++)&#32;{</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00061"/>00061 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pose2D&#32;initial&#32;=&#32;this-&gt;holeMeasurements-&gt;at(i);</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00062"/>00062 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pose2D&#32;pose2(this-&gt;holeMeasurements-&gt;at(i));&#32;//&#32;should&#32;copy</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00063"/>00063 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pose2.translateByMagnitude(HOLE_SIZE&#32;*&#32;0.5);</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00064"/>00064 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(position.isOnLine(initial,&#32;pose2))&#32;{</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00065"/>00065 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;true;</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00066"/>00066 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00067"/>00067 <emphasis role="comment">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00068"/>00068 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00069"/>00069 
<anchor xml:id="_HoleManager_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;holes-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;this-&gt;holes-&gt;at(i)&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;holes-&gt;at(i).isInSquare(position))&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;failed&#32;for:&#32;&quot;&#32;&lt;&lt;&#32;position.getX()&#32;&lt;&lt;&#32;&quot;,&#32;&quot;&#32;&lt;&lt;&#32;position.getY()&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_HoleManager_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_HoleManager_8cpp_source_1l00078"/>00078 }
<anchor xml:id="_HoleManager_8cpp_source_1l00079"/>00079 
<anchor xml:id="_HoleManager_8cpp_source_1l00080"/><link linkend="_classHoleManager_1aa0e47cc875c67f9244088d5c895ec725">00080</link> std::vector&lt;Pose2D&gt;&#32;<link linkend="_classHoleManager_1aa0e47cc875c67f9244088d5c895ec725">HoleManager::getSuggestedNodePlacements</link>()&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;every&#32;hole&#32;return&#32;a&#32;few&#32;points&#32;around&#32;the&#32;square</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;
<anchor xml:id="_HoleManager_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;std::vector&lt;Pose2D&gt;&#32;toReturn;
<anchor xml:id="_HoleManager_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint16_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;holes-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;std::vector&lt;Pose2D&gt;&#32;placements&#32;=&#32;this-&gt;holes-&gt;at(i).getSuggestedNodePlacements();
<anchor xml:id="_HoleManager_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint16_t&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;placements.size();&#32;j++)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toReturn.push_back(placements.at(j));
<anchor xml:id="_HoleManager_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_HoleManager_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toReturn;
<anchor xml:id="_HoleManager_8cpp_source_1l00091"/>00091 }
<anchor xml:id="_HoleManager_8cpp_source_1l00092"/>00092 
<anchor xml:id="_HoleManager_8cpp_source_1l00093"/>00093 <emphasis role="comment">//&#32;weighting&#32;step</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00094"/><link linkend="_classHoleManager_1a1a77b2aa21fe82b6aa7073aa004e9e6f">00094</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classHoleManager_1a1a77b2aa21fe82b6aa7073aa004e9e6f">HoleManager::lineIntersectsAnyHoleMeasurement</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classPose2D">Pose2D</link>&amp;&#32;positionOne,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classPose2D">Pose2D</link>&amp;&#32;positionTwo)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;have&#32;a&#32;pose&#32;of&#32;each&#32;measurement</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;have&#32;to&#32;make&#32;the&#32;rectangle&#32;and&#32;the&#32;expected&#32;line</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00097"/>00097 
<anchor xml:id="_HoleManager_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00099"/>00099 <emphasis role="comment">&#32;&#32;&#32;&#32;for&#32;(uint16_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;holeMeasurements-&gt;size();&#32;i++)&#32;{</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00100"/>00100 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;for&#32;every&#32;point&#32;make&#32;the&#32;rectangle</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00101"/>00101 <emphasis role="comment">&#32;&#32;&#32;&#32;Rectangle&#32;rect&#32;=&#32;makeRectangleFromLine(positionOne,&#32;positionTwo,&#32;MEASUREMENT_WIDTH);&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00102"/>00102 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(lineIntersectsRectangle(positionOne.getX(),&#32;positionOne.getY(),&#32;positionTwo.getX(),&#32;positionTwo.getY(),&#32;rect.r1.getX(),&#32;rect.r1.getY(),&#32;rect.r2.getX(),&#32;rect.r2.getY(),&#32;rect.r3.getX(),&#32;rect.r3.getY(),&#32;rect.r4.getX(),&#32;rect.r4.getY()))&#32;{</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00103"/>00103 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;true;</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00104"/>00104 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00105"/>00105 <emphasis role="comment">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00106"/>00106 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_HoleManager_8cpp_source_1l00107"/>00107 
<anchor xml:id="_HoleManager_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint16_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;holes-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;holes-&gt;at(i).lineIntersectsHole(positionOne,&#32;positionTwo))&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_HoleManager_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00113"/>00113 
<anchor xml:id="_HoleManager_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_HoleManager_8cpp_source_1l00115"/>00115 }
<anchor xml:id="_HoleManager_8cpp_source_1l00116"/>00116 
<anchor xml:id="_HoleManager_8cpp_source_1l00117"/><link linkend="_classHoleManager_1a0a8f51f0c0c0c3af90b3fd0a90ea062e">00117</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classHoleManager_1a0a8f51f0c0c0c3af90b3fd0a90ea062e">HoleManager::offsetAll</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classPose2D">Pose2D</link>&amp;&#32;offset)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_HoleManager_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint16_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;holes-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;holes-&gt;at(i).offset(offset);
<anchor xml:id="_HoleManager_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint16_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;holeMeasurements-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_HoleManager_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;holeMeasurements-&gt;at(i).plus(offset);
<anchor xml:id="_HoleManager_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;}
<anchor xml:id="_HoleManager_8cpp_source_1l00124"/>00124 }
</programlisting></section>
